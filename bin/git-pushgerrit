#! /usr/bin/env python3
#
# git-pushgerrit
#
# Push changes to gerrit for review based on the current tracking branch
#

import subprocess
import sys
import argparse

def get_current_branch():
    cmd = ['git', 'rev-parse', '--abbrev-ref', '--symbolic-full-name', 'HEAD']
    p = subprocess.run(cmd, stdout=subprocess.PIPE)
    if p.returncode == 0:
        return p.stdout.decode('utf-8').splitlines()[0].strip()
    return None

def get_upstream_branch(args):
    upstream = None

    current_branch = get_current_branch()
    if current_branch is not None:
        cmd = ['git', 'config', 'branch.%s.pushgerrit' % current_branch]
        p = subprocess.run(cmd, stdout=subprocess.PIPE)
        if p.returncode == 0:
            upstream = p.stdout.decode('utf-8').splitlines()[0].strip()

    if upstream:
        return upstream

    cmd = ['git', 'rev-parse', '--abbrev-ref', '--symbolic-full-name', '@{push}']
    if args.verbose:
        print(' '.join(cmd))
    p = subprocess.run(cmd, stdout=subprocess.PIPE)
    if p.returncode != 0:
        return None

    upstream = p.stdout.decode('utf-8').splitlines()[0].strip()

    if not upstream:
        print("No upstream branch")
        return None

    return upstream

def main():
    parser = argparse.ArgumentParser(description='Push to gerrit')

    parser.add_argument('source', nargs='?', help='Source object to push', default='HEAD')
    parser.add_argument('--reviewer', '-r', action='append', help='Add reviewers', default=[])
    parser.add_argument('--topic', '-t', help='Set topic')
    parser.add_argument('--code-review', action='store_true', help='Mark as code reviewed')
    parser.add_argument('--verified', action='store_true', help='Mark as verified')
    parser.add_argument('--verbose', '-v', action='count', help='Increase verbosity', default=0)
    parser.add_argument('--draft', action='store_true', help='Push as draft')
    parser.add_argument('--set-target', help='Set current branch push target')
    parser.add_argument('--wip', action='store_true', help='Push as Work-in-Progress')

    args = parser.parse_args()

    if args.set_target:
        current_branch = get_current_branch()
        if current_branch is None:
            print("Cannot get current branch")
            sys.exit(1)

        cmd = ['git', 'config', '--local', 'branch.%s.pushgerrit' % current_branch, args.set_target]
        p = subprocess.run(cmd)
        sys.exit(p.returncode)

    upstream = get_upstream_branch(args)
    if upstream is None:
        sys.exit(1)

    (remote, branch) = upstream.split('/', 1)

    dest = 'refs/for'
    if args.draft:
        dest = 'refs/drafts'

    cmd = ['git', 'push', remote, args.source + ':' + dest + '/' + branch]

    gerrit_args = []
    if args.reviewer:
        for rarg in args.reviewer:
            for r in rarg.split():
                user = r
                if user == "none":
                    continue

                p = subprocess.run(['git', 'config', '--get', 'pushgerrit.useraliases.' + r], stdout=subprocess.PIPE)
                if p.returncode == 0:
                    user = p.stdout.decode('utf-8').splitlines()[0].strip()

                gerrit_args.append('r=' + user)
    if args.topic:
        gerrit_args.append('topic=' + args.topic)
    if args.code_review:
        gerrit_args.append('label=Code-Review+2')
    if args.verified:
        gerrit_args.append('label=Verified+1')
    if args.wip:
        gerrit_args.append('wip')

    if gerrit_args:
        cmd[-1] += '%' + ','.join(gerrit_args)

    if args.verbose:
        print(' '.join(cmd))
    p = subprocess.run(cmd)
    sys.exit(p.returncode)

if __name__ == "__main__":
    main()
